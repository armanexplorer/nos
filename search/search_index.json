{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p><code>nos</code> is the open-source module for running AI workloads on Kubernetes in an optimized way, increasing GPU utilization, cutting down infrastructure costs and improving workloads performance.</p> <p>Currently, the available features are:</p> <ul> <li> <p>Dynamic GPU partitioning: allow to schedule Pods requesting fractions of GPU. GPU partitioning is performed automatically in real-time based on the Pods pending and running in the cluster, so that Pods can request only the resources that are strictly necessary and GPUs are always fully utilized.</p> </li> <li> <p>Elastic Resource Quota management: increase the number of Pods running on the cluster by allowing namespaces to borrow quotas of reserved resources from other namespaces as long as they are not using them.</p> </li> </ul> <p></p>"},{"location":"installation/","title":"Installation","text":"<p>Warning</p> <p>Before proceeding with <code>nos</code> installation, please make sure to meet the requirements  described in the Prerequisites page.</p> <p>You can install <code>nos</code> using Helm 3 (recommended). You can find all the available configuration values in the Chart documentation.</p> <pre><code>helm install oci://ghcr.io/nebuly-ai/helm-charts/nos \\\n  --version 0.1.2 \\\n  --namespace nebuly-nos \\\n  --generate-name \\\n  --create-namespace\n</code></pre> <p>Alternatively, you can use Kustomize by cloning the repository and running <code>make deploy</code>.</p>"},{"location":"installation/#next-steps","title":"Next steps","text":"<ul> <li>Getting started with Dynamic MIG Partitioning</li> <li>Getting started with Dynamic MPS Partitioning</li> <li>Getting started with Elastic Resource Quotas</li> </ul>"},{"location":"prerequisites/","title":"Prerequisites","text":"<ol> <li>Kubernetes version 1.23 or newer</li> <li>GPU Support must be enabled</li> <li>Nebuly's device plugin (required only if using MPS partitioning)</li> <li>Cert Manager (optional, but recommended)</li> </ol>"},{"location":"prerequisites/#enable-gpu-support","title":"Enable GPU support","text":"<p>Before installing <code>nos</code>, you must enable GPU support in your Kubernetes cluster.</p> <p>There are two ways to do this. One option is to manually install the required components individually,while the other consists in installing only the NVIDIA GPU Operator, which automatically installs all the necessary components for you. See below for more information on these two installation methods.</p> <p>We recommended enabling GPU support using the NVIDIA GPU Operator (option 1).</p>"},{"location":"prerequisites/#option-1-nvidia-gpu-operator","title":"Option 1 - NVIDIA GPU Operator","text":"<p>You can install the NVIDIA GPU Operator as follows:</p> <pre><code>helm install --wait --generate-name \\\n     -n gpu-operator --create-namespace \\\n     nvidia/gpu-operator --version v22.9.0 \\\n     --set driver.enabled=true \\\n     --set migManager.enabled=false \\\n     --set mig.strategy=mixed \\\n     --set toolkit.enabled=true\n</code></pre> <p>Note that the GPU Operator will automatically install a recent version of NVIDIA Drivers and CUDA on all the GPU-enabled nodes of your cluster, so you don't have to manually install them.</p> <p>For further information you can refer to the NVIDIA GPU Operator Documentation.</p>"},{"location":"prerequisites/#option-2-manual-installation","title":"Option 2 - Manual installation","text":"<p>Warning</p> <p>If you want to enable MPS Dynamic Partitioning, make sure you have a version of CUDA 11.5 or newer installed, as this is the minimum version that supports GPU memory limits in MPS.</p> <p>To enble GPU support in your cluster, you first need to install NVIDIA Drivers and the NVIDIA Container Toolkit on all the nodes of your cluster with a GPU.</p> <p>After installing the NVIDIA Drivers and the Container Toolkit on your nodes, you need to install the following Kubernetes components:</p> <ul> <li>NVIDIA GPU Feature Discovery</li> <li>NVIDIA Device Plugin</li> </ul> <p>Please note that the configuration parameter <code>migStrategy</code> must be set to <code>mixed</code> (you can do that with <code>--set migStrategy=mixed</code> if you are using Helm).</p>"},{"location":"prerequisites/#install-nebulys-device-plugin","title":"Install Nebuly's device plugin","text":"<p>Info</p> <p>Nebuly's device plugin is required only if you want to use dynamic MPS partitioning. If you don't plan to use MPS partitioning, you can then skip this installation step.</p> <p>You can install Nebuly's device plugin using Helm as follows:</p> <pre><code>helm install oci://ghcr.io/nebuly-ai/helm-charts/nvidia-device-plugin \\\n  --version 0.13.0 \\\n  --generate-name \\\n  -n nebuly-nvidia \\\n  --create-namespace\n</code></pre> <p>Nebuly's device plugin runs only on nodes labelled with <code>nos.nebuly.com/gpu-partitioning=mps</code>.</p> <p>If you already have the NVIDIA device plugin installed on your cluster, you need to ensure that only one instance of the device plugin is running on each GPU node (either Nebuly's or NVIDIA's). One way to do that is to add an affinity rule to the NVIDIA device plugin Daemonset so that it doesn't run on any node that has MPS enabled:</p> <pre><code>affinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n        - matchExpressions:\n            - key: nos.nebuly.com/gpu-partitioning\n              operator: NotIn\n              values:\n                - mps\n</code></pre> <p>For further information you can refer to Nebuly's device plugin documentation.</p>"},{"location":"telemetry/","title":"Sharing feedback to improve <code>nos</code>","text":"<p>Open source is a unique resource for sharing knowledge and building great projects collaboratively with the OSS community. To support the development of <code>nos</code>, during the installation of you could share the information strictly necessary to improve the features of this open-source project and facilitate bug detection and fixing.</p> <p>More specifically, you will foster project enhancement by sharing details about the setup and configuration of the environment where you are installing <code>nos</code> and its components.</p> <p>Which data do we collect?</p> <p>We make sure to collect as little data as possible to improve the open-source project:</p> <ul> <li>basic information about the Kubernetes cluster<ul> <li>Kubernetes version</li> <li>Number of nodes</li> </ul> </li> <li>basic information about each node of the cluster<ul> <li>Kubelet version</li> <li>Operating system</li> <li>Container runtime</li> <li>Node resources</li> <li>Labels from the NVIDIA GPU Feature Discovery, if present</li> <li>Label <code>node.kubernetes.io/instance-type</code>, if present</li> </ul> </li> <li>configuration of <code>nos</code> components<ul> <li>values provided during the Helm chart installation</li> </ul> </li> </ul> <p>Please find below an example of telemetry collection:</p> <pre><code>{\n  \"installationUUID\": \"feb0a960-ed22-4882-96cf-ef0b83deaeb1\",\n  \"nodes\": [\n    {\n      \"name\": \"node-1\",\n      \"Capacity\": {\n        \"cpu\": \"5\",\n        \"memory\": \"7111996Ki\"\n      },\n      \"Labels\": {\n        \"nvidia.com/gpu\": \"true\"\n      },\n      \"NodeInfo\": {\n        \"kernelVersion\": \"5.15.49-linuxkit\",\n        \"osImage\": \"Ubuntu 22.04.1 LTS\",\n        \"containerRuntimeVersion\": \"containerd://1.6.7\",\n        \"kubeletVersion\": \"v1.24.4\",\n        \"architecture\": \"arm64\"\n      }\n    },\n    {\n      \"name\": \"node-2\",\n      \"Capacity\": {\n        \"cpu\": \"2\",\n        \"memory\": \"7111996Ki\"\n      },\n      \"Labels\": null,\n      \"NodeInfo\": {\n        \"kernelVersion\": \"5.15.49-linuxkit\",\n        \"osImage\": \"Ubuntu 22.04.1 LTS\",\n        \"containerRuntimeVersion\": \"containerd://1.6.7\",\n        \"kubeletVersion\": \"v1.24.4\",\n        \"architecture\": \"arm64\"\n      }\n      \"chartValues\": {\n        \"allowDefaultNamespace\": false,\n        \"global\": {\n          \"nvidiaGpuResourceMemoryGB\": 32\n        }\n      },\n      \"components\": {\n        \"nos-gpu-partitioner\": true,\n        \"nos-scheduler\": true,\n        \"nos-operator\": true\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"telemetry/#how-to-opt-out","title":"How to opt-out?","text":"<p>You have two possibilities for opting-out:</p> <ol> <li>Set the value <code>shareTelemetry</code> to false when installing <code>nos</code> with the Helm Chart    <pre><code> helm install oci://ghcr.io/nebuly-ai/helm-charts/nos \\\n --version 0.1.2 \\\n --namespace nebuly-nos \\\n --generate-name \\\n --create-namespace \\\n --set shareTelemetry=false\n</code></pre></li> <li>Install <code>nos</code> without using Helm</li> </ol>"},{"location":"telemetry/#should-i-opt-out","title":"Should I opt out?","text":"<p>Being open-source, we have very limited visibility into the use of the tool unless someone actively contacts us or opens an issue on GitHub.</p> <p>We would appreciate it if you would maintain telemetry, as it helps us improve the source code. In fact, it brings increasing value to the project and helps us to better prioritize feature development.</p> <p>We understand that you may still prefer not to share telemetry data and we respect that desire. Please follow the steps above to disable data collection.</p>"},{"location":"developer/contribution-guidelines/","title":"Contribution guidelines","text":""},{"location":"developer/contribution-guidelines/#how-to-submit-an-issue","title":"How to submit an issue","text":"<p>Did you spot a bug? Did you come up with a cool idea that you think should be implemented? Well, GitHub issues are the best way to let us know!</p> <p>We don't have a strict policy on issue generation: just use a meaningful title and specify the problem or your proposal in the first problem comment. Then, you can use GitHub labels to let us know what kind of proposal you are making, for example bug if you are reporting a new bug or enhancement if you are proposing a library improvement</p>"},{"location":"developer/contribution-guidelines/#how-to-contribute-to-an-issue","title":"How to contribute to an issue","text":"<p>We are always delighted to welcome other people to the contributor section! We are looking forward to welcoming you to the community, but before you rush off and write 1000 lines of code, please take a few minutes to read our tips for contributing to the library.</p> <p>If it's one of your first contributions, check the tag good first issue \ud83c\udfc1</p> <ul> <li>Please fork the library instead of pulling it and creating a new branch.</li> <li>Work on your fork and work on your branch. Do not hesitate to ask questions by commenting on the issue or asking in the community chats.</li> <li>Open a pull request when you think the problem has been solved.</li> <li>In the pull request specify which problems it is solving/closing. For instance, if the pull request solves problem #1, the comment should be <code>Closes #1</code>.</li> <li>The title of the pull request must be meaningful and self-explanatory.</li> </ul>"},{"location":"developer/contribution-guidelines/#coding-style","title":"Coding style","text":"<p>We use golangci-lint to enforce a consistent coding style. You can run the linter by using the following target: <pre><code>make lint\n</code></pre></p>"},{"location":"developer/contribution-guidelines/#license","title":"License","text":"<p>All the source code files requires a license header. You can add automatically add it to new files by running: <pre><code>make license-fix\n</code></pre></p>"},{"location":"developer/getting-started/","title":"Developer","text":""},{"location":"developer/getting-started/#local-development","title":"Local development","text":"<p>We use Makefile targets for making it easy to setup a local development environment. You can list all the available targets by running <code>make help</code>.</p>"},{"location":"developer/getting-started/#create-a-local-environment","title":"Create a local environment","text":"<p>You can create a local development environment just by running:</p> <pre><code>make cluster\n</code></pre> <p>The target uses Kind to create a local Kubernetes cluster that uses Docker containers as nodes.</p> <p>The nos operator uses webhooks that require SSL certificates. You can let cert-manager create and manage them by installing it on the cluster you have created in the previous step: <pre><code>make install-cert-manager\n</code></pre></p>"},{"location":"developer/getting-started/#build-components","title":"Build components","text":"<p>You can build the nos components by running the <code>docker-build-&lt;component-name&gt;</code> targets. The targets build the Docker images using the default image name tagged with the version defined in the first line of the Makefile.</p> <p>Optionally, you can override the name and the tag of the Docker image by providing them as argument to the target.</p>"},{"location":"developer/getting-started/#build-gpu-partitioner","title":"Build GPU Partitioner","text":"<p><pre><code>make docker-build-gpu-partitioner\n</code></pre> <pre><code>make docker-build-gpu-partitioner GPU_PARTITIONER_IMG=custom-image:tag\n</code></pre></p>"},{"location":"developer/getting-started/#build-scheduler","title":"Build Scheduler","text":"<p><pre><code>make docker-build-scheduler\n</code></pre> <pre><code>make docker-build-scheduler SCHEDULER_IMG=custom-image:tag\n</code></pre></p>"},{"location":"developer/getting-started/#build-operator","title":"Build Operator","text":"<p><pre><code>make docker-build-operator\n</code></pre> <pre><code>make docker-build-operator OPERATOR_IMG=custom-image:tag\n</code></pre></p>"},{"location":"developer/getting-started/#build-mig-agent","title":"Build MIG Agent","text":"<p><pre><code>make docker-build-mig-agent\n</code></pre> <pre><code>make docker-build-mig-agent MIG_AGENT_IMG=custom-image:tag\n</code></pre></p>"},{"location":"developer/getting-started/#build-gpu-agent","title":"Build GPU Agent","text":"<p><pre><code>make docker-build-gpu-agent\n</code></pre> <pre><code>make docker-build-gpu-agent GPU_AGENT_IMG=custom-image:tag\n</code></pre></p>"},{"location":"developer/getting-started/#load-docker-images-into-the-cluster","title":"Load Docker images into the cluster","text":"<p>\u26a0\ufe0f If you use the tag <code>latest</code> Kubernetes will always download the image from the registry, ignoring the image you loaded into the cluster.</p> <p>You can load the Docker images you have built in the previous step into the cluster by running: <pre><code>kind load docker-image &lt;image-name&gt;:&lt;image-tag&gt;\n</code></pre></p>"},{"location":"developer/getting-started/#install-components","title":"Install components","text":"<p>You can install single nos components by running: <pre><code>make deploy-&lt;component&gt;\n</code></pre> where <code>&lt;component&gt;</code> is one of the following: - <code>operator</code> - <code>gpu-partitioner</code> - <code>scheduler</code> - <code>mig-agent</code> - <code>gpu-agent</code></p> <p>The targets above installs the Docker images tagged with the version defined in the first line of the Makefile.</p> <p>You can override the Docker image name and tag by providing it as an argument to the target: <pre><code>make deploy-&lt;component&gt; &lt;COMPONENT&gt;_IMG=&lt;your-image&gt;\n</code></pre></p>"},{"location":"dynamic-gpu-partitioning/configuration/","title":"Configuration","text":"<p>You can customize the GPU Partitioner settings by editing the values file of the nos Helm chart. In this section we focus on some of the values that you would typically want to customize.</p>"},{"location":"dynamic-gpu-partitioning/configuration/#pods-batch-size","title":"Pods batch size","text":"<p>The GPU partitioner processes pending pods in batches of configurable size. You can set the batch size by editing the following two parameters of the configuration:</p> <ul> <li><code>batchWindowTimeoutSeconds</code>: timeout of the time window used for batching pending Pods. The time window starts when the GPU Partitioner starts processing a batch of pending Pods, and ends when the timeout expires or the batch is completed.</li> <li><code>batchWindowIdleSeconds</code>: idle time before a batch of pods is considered completed. Once the time window of a batch starts, if idle time elapses and no new pending pods are detected during this time, the batch is considered completed.</li> </ul> <p>Increase the value of these two parameters if you want the GPU partitioner to take into account more pending Pods when deciding the GPU partitioning plan, thus making potentially it more effective.</p> <p>Set lower values if you want the partitioning to be performed more frequently (e.g. if you want to react faster to changes in the cluster), and you don't mind if the partitioning is less effective (e.g. the resources requested by some pending pods might not be created).</p>"},{"location":"dynamic-gpu-partitioning/configuration/#scheduler-configuration","title":"Scheduler configuration","text":"<p>The GPU Partitioner uses an internal scheduler to simulate the scheduling of the pending pods to determine whether a candidate GPU partitioning plan would make the pending pods schedulable.</p> <p>The GPU Partitioner reads the scheduler configuration from the ConfigMap defined by the field <code>gpuPartitioner.scheduler.config</code>, and it falls back to the default configuration if the ConfigMap is not found. You can edit this field to provide your custom scheduler configuration.</p> <p>If you installed <code>nos</code> with the <code>scheduler</code> flag enabled, the GPU Partitioner will use its configuration unless you specify a custom ConfigMap.</p>"},{"location":"dynamic-gpu-partitioning/configuration/#available-mig-geometries","title":"Available MIG geometries","text":"<p>The GPU Partitioner determines the most proper partitioning plan to apply by considering the possible MIG geometries allowed each of the GPU models present in the cluster.</p> <p>You can set the MIG geometries supported by each GPU model by editing the <code>gpuPartitioner.knownMigGeometries</code> value of the installation chart.</p> <p>You can edit this file to add new MIG geometries for new GPU models, or to edit the existing ones according to your specific needs. For instance, you can remove some MIG geometries if you don't want to allow them to be used for a certain GPU model.</p>"},{"location":"dynamic-gpu-partitioning/configuration/#how-it-works","title":"How it works","text":"<p>The GPU Partitioner component watches for pending pods that cannot be scheduled due to lack of MIG/MPS resources they request. If it finds such pods, it checks the current partitioning state of the GPUs in the cluster and tries to find a new partitioning state that would allow to schedule them without deleting any of the used resources.</p> <p>It does that by using an internal k8s scheduler, so that before choosing a candidate partitioning, the GPU Partitioner simulates the scheduling to check whether the partitioning would actually allow to schedule the pending Pods. If multiple partitioning configuration can be used to schedule the pending Pods, the one that would result in the highest number of schedulable pods is chosen.</p> <p>Moreover, just in the case of MIG partitioning, each specific GPU model allows to create only certain combinations of MIG profiles, which are called MIG geometries, so the GPU partitioner takes this constraint into account when trying to find a new partitioning. The available MIG geometries of each GPU model are defined in the field <code>gpuPartitioner.knownMigGeometries</code> field of the Helm chart.</p>"},{"location":"dynamic-gpu-partitioning/configuration/#mig-partitioning","title":"MIG Partitioning","text":"<p>The actual partitioning specified by the GPU Partitioner for MIG GPUs is performed by the MIG Agent, which is a daemonset running on every node labeled with <code>nos.nebuly.com/gpu-partitioning: mig</code> that creates/deletes MIG profiles as requested by the GPU Partitioner.</p> <p>The MIG Agent exposes to the GPU Partitioner the used/free MIG resources of all the GPUs of the node on which it is running through the following node annotations:</p> <ul> <li><code>nos.nebuly.com/status-gpu-&lt;index&gt;-&lt;mig-profile&gt;-free: &lt;quantity&gt;</code></li> <li><code>nos.nebuly.com/status-gpu-&lt;index&gt;-&lt;mig-profile&gt;-used: &lt;quantity&gt;</code></li> </ul> <p>The MIG Agent also watches the node's annotations and, every time there desired MIG partitioning specified by the GPU Partitioner does not match the current state, it tries to apply it by creating and deleting the MIG profiles on the target GPUs. The GPU Partitioner specifies the desired MIG geometry of the GPUs of a node through annotations in the following format:</p> <p><code>nos.nebuly.com/spec-gpu-&lt;index&gt;-&lt;mig-profile&gt;: &lt;quantity&gt;</code></p> <p>Note that in some cases the MIG Agent might not be able to apply the desired MIG geometry specified by the GPU Partitioner. This can happen for two reasons:</p> <ol> <li>the MIG Agent never deletes MIG resources being in use by a Pod</li> <li>some MIG geometries require the MIG profiles to be created in a certain order, and due to reason (1) the MIG Agent might not be able to delete and re-create the existing MIG profiles in the order required by the new MIG geometry.</li> </ol> <p>In these cases, the MIG Agent tries to apply the desired partitioning by creating as many required resources as possible, in order to maximize the number of schedulable Pods. This can result in the MIG Agent applying the desired MIG geometry only partially.</p> <p>For further information regarding NVIDIA MIG and its integration with Kubernetes, please refer to the NVIDIA MIG User Guide and to the MIG Support in Kubernetes official documentation provided by NVIDIA.</p>"},{"location":"dynamic-gpu-partitioning/configuration/#mps-partitioning","title":"MPS Partitioning","text":"<p>The creation and deletion of MPS resources is handled by the k8s-device-plugin, which can expose a single GPU as multiple MPS resources according to its configuration.</p> <p>When allocating a container requesting an MPS resource, the device plugin takes care of injecting theenvironment variables and mounting the volumes required by the container to communicate to the MPS server, making sure that the resource limits defined by the device requested by the container are enforced.</p> <p>For more information about MPS integration with Kubernetes you can refer to the Nebuly k8s-device-plugin documentation.</p>"},{"location":"dynamic-gpu-partitioning/getting-started-mig/","title":"Getting started with MIG partitioning","text":"<p>Warning</p> <p>Multi-instance GPU (MIG) mode is supported only by NVIDIA GPUs based on Ampere, Hopper and newer architectures.</p>"},{"location":"dynamic-gpu-partitioning/getting-started-mig/#prerequisites","title":"Prerequisites","text":"<p>To enable Dynamic MIG Partitioning on a certain node, the following prerequisites must be met:</p> <ul> <li>if a node has multiple GPUs, all the GPUs must be of the same model</li> <li>all the GPUs of the nodes for which you want to enable MIG partitioning must have MIG mode enabled</li> </ul>"},{"location":"dynamic-gpu-partitioning/getting-started-mig/#enable-mig-mode","title":"Enable MIG mode","text":"<p>By default, MIG is not enabled on GPUs. In order to enable it, SSH into the node and run the following command for each GPU you want to enable MIG, where <code>&lt;index&gt;</code> corresponds to the index of each GPU:</p> <pre><code>sudo nvidia-smi -i &lt;index&gt; -mig 1\n</code></pre> <p>Depending on the kind of machine you are using, it may be necessary to reboot the node after enabling MIG mode for one of its GPUs.</p> <p>You can check whether MIG mode has been successfully enabled by running the following command and checking if you get a similar output:</p> <pre><code>$ nvidia-smi -i &lt;index&gt; --query-gpu=pci.bus_id,mig.mode.current --format=csv\n\npci.bus_id, mig.mode.current\n00000000:36:00.0, Enabled\n</code></pre> <p>For more information and troubleshooting you can refer to th NVIDIA documentation.</p>"},{"location":"dynamic-gpu-partitioning/getting-started-mig/#enable-automatic-partitioning","title":"Enable automatic partitioning","text":"<p>You can enable automatic MIG partitioning on a node by adding to it the following label:</p> <pre><code>kubectl label nodes &lt;node-name&gt; \"nos.nebuly.com/gpu-partitioning=mig\"\n</code></pre> <p>The label delegates to <code>nos</code> the management of the MIG resources of all the GPUs of that node, so you don't have to manually configure the MIG geometry of the GPUs anymore: <code>nos</code> will dynamically create and delete the MIG profiles according to the resources requested by the pods submitted to the cluster, within the limits of the possible MIG geometries supported by each GPU model.</p> <p>The available MIG geometries supported by each GPU model are defined in a ConfigMap, which by default contains with the supported geometries of the most popular GPU models. You can override or extend the values of this ConfigMap by editing the field <code>gpuPartitioner.knownMigGeometries</code> of the installation chart.</p>"},{"location":"dynamic-gpu-partitioning/getting-started-mig/#create-pods-requesting-mig-resources","title":"Create pods requesting MIG resources","text":"<p>Tip</p> <p>There is no need to manually create and manage MIG configurations. You can simply submit your Pods to the cluster and the requested MIG devices are automatically provisioned.</p> <p>You can make your pods request slices of GPU by specifying MIG devices in their containers requests:</p> <pre><code>$ kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mig-partitioning-example\nspec:\n  containers:\n    - name: sleepy\n      image: \"busybox:latest\"\n      command: [\"sleep\", \"120\"]\n      resources:\n        limits:\n          nvidia.com/mig-1g.10gb: 1\nEOF\n</code></pre> <p>In the example above, the pod requests a slice of a 10GB of memory, which is the smallest unit available in <code>NVIDIA-A100-80GB-PCIe</code> GPUs. If in your cluster you have different GPU models, the <code>nos</code> might not be able to create the specified MIG resource. You can find the MIG profiles supported by each GPU model in the NVIDIA documentation.</p> <p>Note</p> <p>Each container is supposed to request at most one MIG device. If a container needs more resources, then it should ask for a larger, single device as opposed to multiple smaller devices.</p>"},{"location":"dynamic-gpu-partitioning/getting-started-mps/","title":"Getting started with MPS partitioning","text":"<p>Warning</p> <p>Multi-Process Service (MPS) is supported only by NVIDIA GPUs based on Volta and newer architectures.</p>"},{"location":"dynamic-gpu-partitioning/getting-started-mps/#prerequisites","title":"Prerequisites","text":"<ul> <li>you need the Nebuly k8s-device-plugin installed on your cluster</li> </ul>"},{"location":"dynamic-gpu-partitioning/getting-started-mps/#enable-automatic-partitioning","title":"Enable automatic partitioning","text":"<p>You can enable automatic MPS partitioning on a node by adding to it the following label:</p> <pre><code>kubectl label nodes &lt;node-name&gt; \"nos.nebuly.com/gpu-partitioning=mps\"\n</code></pre> <p>The label delegates to <code>nos</code> the management of the MPS resources of all the GPUs of that node. You just have to create submit your Pods to the cluster and  the requested MPS resources are automatically provisioned.</p>"},{"location":"dynamic-gpu-partitioning/getting-started-mps/#create-pods-requesting-mps-resources","title":"Create pods requesting MPS resources","text":"<p>You can make your pods request slices of GPU by specifying MPS resources in their containers requests. MPS devices are exposed by our k8s-device-plugin using the following naming convention: <code>nvidia.com/gpu-&lt;size&gt;gb</code>, where <code>&lt;size&gt;</code> corresponds to the GB of memory of the GPU slice. The computing resources are instead equally shared among all its MPS resources.</p> <p>You can specify any size you want, but you should keep in mind that the GPU Partitioner will create an MPS resource on a certain GPU only if its size is smaller or equal than the total amount of memory of that GPU (which is indicated by the node label <code>nvidia.com/gpu.memory</code> applied by the NVIDIA GPU Operator).</p> <p>For instance, you can create a pod requesting a slice of a 10GB of GPU memory as follows:</p> <pre><code>$ kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mps-partitioning-example\nspec:\n  hostIPC: true # (2)\n  securityContext:\n    runAsUser: 1000 # (3)\n  containers:\n    - name: sleepy\n      image: \"busybox:latest\"\n      command: [\"sleep\", \"120\"]\n      resources:\n        limits:\n          nvidia.com/gpu-10gb: 1 # (1)\nEOF\n</code></pre> <ol> <li>Fraction of GPU with 10 GB of memory</li> <li><code>hostIPC</code> must be set to true</li> <li>Containers must run as the same user as the MPS Server</li> </ol> <p>Pods requesting MPS resources must meet two requirements:</p> <ol> <li><code>hostIPC</code> must be set to <code>true</code> in order to allow containers to access the IPC namespace of the host</li> <li>Containers must run as the same user as the user running the MPS server on the host, which is <code>1000</code> by default</li> </ol> <p>The two requirements above are due to how MPS works. Since it requires the clients and the server to share the same memory space, we need to allow the pods to access the host IPC namespace so that it can communicate with the MPS server running on it. Moreover, the MPS server accepts only connections from clients running as the same user as the server, which is <code>1000</code> by default (you can change it by setting the <code>mps.userID</code> value when installing the k8s-device-plugin chart), so the containers of your pods must run with the same user if they request MPS resources.</p> <p>Note</p> <p>Containers are supposed to request at most one MPS device. If a container needs more resources, then it should ask for a larger, single device as opposed to multiple smaller devices</p> <p>Warning</p> <p>If you run <code>nvidia-smi</code> inside a container, the output still shows the whole memory of the GPU. Nevertheless, processes inside the container are able to allocate only the amount of memory requested by the contaner. You can check the availble GPU memory through the environment variable <code>CUDA_MPS_PINNED_DEVICE_MEM_LIMIT</code>.</p>"},{"location":"dynamic-gpu-partitioning/overview/","title":"Overview","text":"<p><code>nos</code> allows you to schedule Pods requesting fractions of GPUs. The GPUs are automatically partitioned into slices that can be requested by individual containers. In this way, GPUs are shared among multiple Pods increasing the overall utilization.</p> <p>The GPUs partitioning is performed automatically in real-time based on the requests of the Pods in your cluster. <code>nos</code> constantly watches the pending Pods and finds the best possible GPU partitioning configuration to schedule the highest number of the ones requesting fractions of GPUs.</p> <p>You can think of <code>nos</code> as a Cluster Autoscaler for GPUs: instead of adjusting the number of nodes and GPUs, it dynamically partitions them to maximize their utilization, leading to spare GPU capacity. Then, you can schedule more Pods or reduce the number of GPU nodes needed, reducing infrastructure costs.</p> <p>The GPU partitioning is performed either using Multi-instance GPU (MIG) or Multi-Process Service (MPS), depending on the partitioning mode you choose for each node.</p>"},{"location":"dynamic-gpu-partitioning/partitioning-modes-comparison/","title":"Partitioning modes comparison","text":"<p>The following tables summarizes the difference between the different partitioning modes supported by NVIDIA GPUs. Note that they are not mutually exclusive: <code>nos</code> allows you to choose a different partitioning mode for each node in your cluster according to your needs and available hardware.</p> Partitioning mode Supported by <code>nos</code> Workload isolation level Pros Cons Multi-instance GPU (MIG) \u2705 Best <ul><li>Processes are executed in parallel</li><li>Full isolation (dedicated memory and compute resources)</li></ul> <ul><li>Supported by fewer GPU models (only Ampere or more recent architectures)</li><li>Coarse-grained control over memory and compute resources</li></ul> Multi-process server (MPS) \u2705 Medium <ul><li>Processes are executed parallel</li><li>Fine-grained control over memory and compute resources allocation</li></ul> <ul><li>No error isolation and memory protection</li></ul> Time-slicing \u274c None <ul><li>Processes are executed concurrently</li><li>Supported by older GPU architectures (Pascal or newer)</li></ul> <ul><li>No resource limits</li><li>No memory isolation</li><li>Lower performance due to context-switching overhead</li></ul>"},{"location":"dynamic-gpu-partitioning/partitioning-modes-comparison/#multi-instance-gpu-mig","title":"Multi-instance GPU (MIG)","text":"<p>Multi-instance GPU (MIG) is a technology available on NVIDIA Ampere or more recent architectures that allows to securely partition a GPU into separate GPU instances for CUDA applications, each fully isolated with its own high-bandwidth memory, cache, and compute cores.</p> <p>The isolated GPU slices are called MIG devices, and they are named adopting a format that indicates the compute and memory resources of the device. For example, 2g.20gb corresponds to a GPU slice with 20 GB of memory.</p> <p>MIG does not allow to create GPU slices of custom sizes and quantity, as each GPU model only supports a specific set of MIG profiles. This reduces the degree of granularity with which you can partition the GPUs. Additionally, the MIG devices must be created respecting certain placement rules, which further limits flexibility of use.</p> <p>MIG is the GPU sharing approach that offers the highest level of isolation among processes. However, it lacks in flexibility and it is compatible only with few GPU architectures (Ampere and Hopper).</p> <p>You can find out more on how MIG technology works in the official NVIDIA MIG User Guide.</p>"},{"location":"dynamic-gpu-partitioning/partitioning-modes-comparison/#multi-process-service-mps","title":"Multi-Process Service (MPS)","text":"<p>Multi-Process Service (MPS) is a client-server implementation of the CUDA Application Programming Interface (API) for running multiple processes concurrently on the same GPU:</p> <ul> <li>the server manages GPU access providing concurrency between clients</li> <li>clients connect to the server through the client runtime, which is built into the CUDA Driver library and may be used transparently by any CUDA application.</li> </ul> <p>The main advantage of MPS is that it provides a fine-grained control over the GPU assigned to each client, allowing to specify arbitrary limits on both the amount of allocatable memory and the available compute. The Nebuly k8s-device-plugin takes advantage of this feature for exposing to Kubernetes GPU resources with an arbitrary amount of allocatable memory defined by the user.</p> <p>Compared to time-slicing, MPS eliminates the overhead of context-switching by running processes in parallel through spatial sharing, and therefore leads to better compute performance. Moreover, MPS provides each client with its own GPU memory address space. This allows to enforce memory limits on the processes overcoming the limitations of time-slicing sharing.</p> <p>It is however important to point out that processes sharing a GPU through MPS are not fully isolated from each other. Indeed, even though MPS allows to limit clients' compute and memory resources, it does not provide error isolation and memory protection. This means that a client process can crash and cause the entire GPU to reset, impacting all other processes running on the GPU. However, this issue can often be addressed by properly handling CUDA errors and SIGTERM signals.</p>"},{"location":"dynamic-gpu-partitioning/partitioning-modes-comparison/#time-slicing","title":"Time-slicing","text":"<p>Time-slicing consists of oversubscribing a GPU leveraging its time-slicing scheduler, which executes multiple CUDA processes concurrently through temporal sharing.</p> <p>This means that the GPU shares its compute resources among the different processes in a fair-sharing manner by switching between processes at regular intervals of time. This generates a computing time overhead related to the continuous context switching, which translates into jitter and higher latency.</p> <p>Time-slicing is supported by basically every GPU architecture and is the simplest solution for sharing a GPU in a Kubernetes cluster. However, constant switching among processes creates a computation time overhead. Also, time-slicing does not provide any level of memory isolation among the processes sharing a GPU, nor any memory allocation limits, which can lead to frequent Out-Of-Memory (OOM) errors.</p> <p>Info</p> <p>Given the drawbacks above the availability of more robust technologies such as MIG and MPS, at the moment we decided to not support time-slicing GPU sharing in <code>nos</code>.</p>"},{"location":"dynamic-gpu-partitioning/troubleshooting/","title":"Troubleshooting","text":"<p>If you run into issues with Automatic GPU Partitioning, you can troubleshoot by checking the logs of the GPU Partitioner and MIG Agent pods. You can do that by running the following commands:</p> <p>Check GPU Partitioner logs:</p> <pre><code> kubectl logs -n nebuly-nos -l app.kubernetes.io/component=nos-gpu-partitioner -f\n</code></pre> <p>Check MIG Agent logs:</p> <pre><code> kubectl logs -n nebuly-nos -l app.kubernetes.io/component=nos-mig-agent -f\n</code></pre> <p>Check Nebuly's device-plugin logs:</p> <pre><code>kubectl logs -n nebuly-nvidia -l app.kubernetes.io/name=nebuly-nvidia-device-plugin -f\n</code></pre>"},{"location":"elastic-resource-quota/configuration/","title":"Configuration","text":""},{"location":"elastic-resource-quota/configuration/#scheduler-installation-options","title":"Scheduler installation options","text":"<p>You can add scheduling support for Elastic Resource Quota to your cluster by choosing one of the following options. In both cases, you also need to install the <code>nos operator</code> to manage the CRDs.</p>"},{"location":"elastic-resource-quota/configuration/#option-1-use-nos-scheduler-recommended","title":"Option 1 - Use nos scheduler (recommended)","text":"<p>This is the recommended option. You can deploy the nos scheduler to your cluster either as the default scheduler or as a second scheduler that runs alongside the default one. In the latter case, you can use the <code>schedulerName</code> field of the Pod spec to specify which scheduler should be used.</p> <p>If you installed <code>nos</code> through the Helm chart, the scheduler is deployed automatically unless you set the value <code>scheduler.enabled=false</code>.</p>"},{"location":"elastic-resource-quota/configuration/#option-2-use-your-k8s-scheduler","title":"Option 2 - Use your k8s scheduler","text":"<p>Since nos Elastic Quota support is implemented as a scheduler plugin, you can compile it into your k8s scheduler and then enable it through the kube-scheduler configuration as follows:</p> <pre><code>apiVersion: kubescheduler.config.k8s.io/v1beta2\nkind: KubeSchedulerConfiguration\nleaderElection:\n  leaderElect: false\nprofiles:\n  - schedulerName: default-scheduler\n    plugins:\n      preFilter:\n        enabled:\n          - name: CapacityScheduling\n      postFilter:\n        enabled:\n          - name: CapacityScheduling\n        disabled:\n          - name: \"*\"\n      reserve:\n        enabled:\n          - name: CapacityScheduling\n    pluginConfig:\n      - name: CapacityScheduling\n        args:\n          # Defines how much GB of memory does a nvidia.com/gpu has.\n          nvidiaGpuResourceMemoryGB: 32\n</code></pre> <p>In order to compile the plugin with your scheduler, you just need to add the following line to the <code>main.go</code> file of your scheduler:</p> <pre><code>package main\n\nimport (\n \"github.com/nebuly-ai/nos/pkg/scheduler/plugins/capacityscheduling\"\n \"k8s.io/kubernetes/cmd/kube-scheduler/app\"\n\n // Import plugin config\n \"github.com/nebuly-ai/nos/pkg/api/scheduler\"\n \"github.com/nebuly-ai/nos/pkg/api/scheduler/v1beta3\"\n\n // Ensure nos.nebuly.com/v1alpha1 package is initialized\n _ \"github.com/nebuly-ai/nos/pkg/api/nos.nebuly.com/v1alpha1\"\n)\n\nfunc main() {\n // - rest of your code here -\n\n // Add plugin config to scheme\n utilruntime.Must(scheduler.AddToScheme(scheme))\n utilruntime.Must(v1beta3.AddToScheme(scheme))\n\n // Add plugin to scheduler command\n command := app.NewSchedulerCommand(\n  // - your other plugins here -\n  app.WithPlugin(capacityscheduling.Name, capacityscheduling.New),\n )\n\n // - rest of your code here -\n}\n</code></pre> <p>If you choose this installation option, you don't need to deploy <code>nos</code> scheduler, so you can disable it by setting <code>--set scheduler.enabled=false</code> when installing the <code>nos</code> chart.</p>"},{"location":"elastic-resource-quota/getting-started/","title":"Getting started","text":""},{"location":"elastic-resource-quota/getting-started/#create-elastic-quotas","title":"Create elastic quotas","text":"<pre><code>$ kubectl apply -f -- &lt;&lt;EOF\napiVersion: nos.nebuly.com/v1alpha1\nkind: ElasticQuota\nmetadata:\n  name: quota-a\n  namespace: team-a\nspec:\n  min:\n    cpu: 2\n    nos.nebuly.com/gpu-memory: 16\n  max:\n    cpu: 10\nEOF\n</code></pre> <p>The example above creates a quota for the namespace <code>team-a</code>, guaranteeing it 2 CPUs and 16 GB of GPU memory, and limiting the maximum number of CPUs it can use to 10. Note that:</p> <ul> <li>the <code>max</code> field is optional. If it is not specified, then the Elastic Quota does not enforce any upper limits on the amount resources that can be created in the namespace</li> <li>you can specify any valid Kubernetes resource you want in <code>max</code> and <code>min</code> fields</li> </ul>"},{"location":"elastic-resource-quota/getting-started/#create-pods-subject-to-elastic-resource-quota","title":"Create Pods subject to Elastic Resource Quota","text":"<p>Unless you deployed the <code>nos</code> scheduler as the default scheduler for your cluster, you need to instruct Kubernetes to use it for scheduling the Pods you want to be subject to Elastic Resource Quotas.</p> <p>You can do that by setting the value of the <code>schedulerName</code> field of your Pods specification to <code>scheduler</code> (or to any name you chose when installing <code>nos</code>), as shown in the example below.</p> <pre><code>apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  schedulerName: nos-scheduler\n  containers:\n    - name: nginx\n      image: nginx:1.14.2\n      ports:\n        - containerPort: 80\n</code></pre>"},{"location":"elastic-resource-quota/getting-started/#how-to-define-resource-quotas","title":"How to define resource quotas","text":"<p>You can define resource limits on namespaces using two custom resources: <code>ElasticQuota</code> and <code>CompositeElasticQuota</code>. They both work in the same way, the only difference is that the latter defines limits on multiple namespaces instead of on a single one. Limits are specified through two fields:</p> <ul> <li><code>min</code>: the minimum resources that are guaranteed to the namespace. <code>nos</code> will make sure that, at any time, the namespace subject to the quota will always have access to at least these resources.</li> <li><code>max</code>: optional field that limits the total amount of resources that can be requested by a namespace. If not max is not specified, then <code>nos</code> does not enforce any upper limits on the resources that can be requested by the namespace.</li> </ul> <p>You can find sample definitions of these resources under the samples directory.</p> <p>Note that <code>ElasticQuota</code> and <code>CompositeElasticQuota</code> are treated by <code>nos</code> in the same way: a namespace subject to an <code>ElasticQuota</code> can borrow resources from namespaces subject to either other elastic quotas or composite elastic quotas and, vice-versa, namespaces subject to a <code>CompositeElasticQuota</code> can borrow resources from namespaces subject to either elastic quotas or composite elastic quotas.</p>"},{"location":"elastic-resource-quota/getting-started/#constraints","title":"Constraints","text":"<p>The following constraints are enforced over elastic quota resources:</p> <ul> <li>you can create at most one <code>ElasticQuota</code> per namespace</li> <li>a namespace can be subject either to one <code>ElasticQuota</code> or one <code>CompositeElasticQuota</code>, but not both at the same time</li> <li>if a quota resource specifies both <code>max</code> and <code>min</code> fields, then the value of the resources specified in <code>max</code> must be greater or equal than the ones specified in <code>min</code></li> </ul>"},{"location":"elastic-resource-quota/getting-started/#how-used-resources-are-computed","title":"How used resources are computed","text":"<p>When a namespace is subject to an ElasticQuota (or to a CompositeElasticQuota), <code>nos</code> computes the number of quotas consumed by that namespace by aggregating the resources requested by its pods, considering only the ones whose phase is <code>Running</code>. In this way, <code>nos</code> avoid lower resource utilization due to scheduled pods that failed to start.</p> <p>Every time the amount of resources consumed by a namespace changes (e.g a Pod changes its phase to or from <code>Running</code>), the status of the respective quota object gets updated with the new amount of used resources.</p> <p>You can check how many resources have been consumed by each namespace by looking at the field <code>used</code> of the <code>ElasticQuota</code> and <code>CompositeElasticQuota</code> objects status.</p>"},{"location":"elastic-resource-quota/key-concepts/","title":"Key concepts","text":""},{"location":"elastic-resource-quota/key-concepts/#over-quotas","title":"Over-quotas","text":"<p>If a namespace subject to an <code>ElasticQuota</code> (or, equivalently, to a <code>CompositeElasticQuota</code>) is using all the resources guaranteed by the <code>min</code> field of its quota, it can still host new pods by \"borrowing\" quotas from other namespaces which has available resources (e.g. from namespaces subject to other quotas where <code>min</code> resources are not being completely used).</p> <p>Info</p> <p>Pods that are scheduled \"borrowing\" unused quotas from other namespaces are called over-quota pods.</p> <p>Over-quota pods can be preempted at any time to free up resources if any of the namespaces lending the quotas claims back its resources.</p> <p>You can check whether a Pod is in over-quota by checking the value of the label <code>nos.nebuly.com/capacity</code>, which is automatically created and updated by the nos operator for every Pod created in a namespace subject to an ElasticQuota or to a CompositeElasticQuota. The two possible values for this label are <code>in-quota</code> and <code>over-quota</code>.</p> <p>You can use this label to easily find out at any time which are the over-quota pods subject to preemption risk:</p> <pre><code>kubectl get pods --all-namespaces -l nos.nebuly.com/capacity=\"over-quota\"\n</code></pre>"},{"location":"elastic-resource-quota/key-concepts/#how-over-quota-pods-are-labelled","title":"How over-quota pods are labelled","text":"<p>All the pods created within a namespace subject to a quota are labelled as <code>in-quota</code> as long as the <code>used</code> resources of the quota do not exceed its <code>min</code> resources. When this happens and news pods are created in that namespace, they are labelled as <code>over-quota</code> when they reach the running phase.</p> <p><code>nos</code> re-evaluates the over-quota status of each Pod of a namespace every time a new Pod in that namespace changes its phase to/from \"Running\". With the default configuration, <code>nos</code> sorts the pods by creation date and, if the creation timestamp is the same, by requested resources, placing first the pods with older creation timestamp and with fewer requested resources. After the pods are sorted, <code>nos</code> computes the aggregated requested resources by summing the request of each Pod, and it marks as <code>over-quota</code> all the pods for which <code>used</code> is greater than <code>min</code>.</p> <p>\ud83d\udea7 Soon it will be possible to customize the order criteria used for sorting the pods during this process through the nos-operator configuration.</p>"},{"location":"elastic-resource-quota/key-concepts/#over-quota-fair-sharing","title":"Over-quota fair sharing","text":"<p>In order to prevent a single namespace from consuming all the over-quotas available in the cluster and starving the others, <code>nos</code> implements a fair-sharing mechanism that guarantees that each namespace subject to an ElasticQuota has right to a part of the available over-quotas proportional to its <code>min</code> field.</p> <p>The fair-sharing mechanism does not enforce any hard limit on the amount of over-quotas pods that a namespace can have, but instead it implements fair sharing by preemption. Specifically, a Pod-A subject to elastic-quota-A can preempt Pod-b subject to elastic-quota-B if the following conditions are met:</p> <ol> <li>Pod-B is in over-quota</li> <li><code>used</code> field of Elastic-quota-A + Pod-A request &lt;= guaranteed over-quotas A</li> <li>used over-quotas of Elastic-quota-B &gt; guaranteed over-quotas B</li> </ol> <p>Where:</p> <ul> <li>guaranteed over-quotas A = percentage of guaranteed over-quotas A * tot. available over-quotas</li> <li>percentage of guaranteed over-quotas A = min A / sum(min_i) * 100</li> <li>tot. available over-quotas = sum( max(0, min_i - used_i ) )</li> </ul>"},{"location":"elastic-resource-quota/key-concepts/#example","title":"Example","text":"<p>Let's assume we have a K8s cluster with the following Elastic Quota resources:</p> Elastic Quota Min Max Elastic Quota A nos.nebuly.com/gpu-memory: 40 None Elastic Quota B nos.nebuly.com/gpu-memory: 10 None Elastic Quota C nos.nebuly.com/gpu-memory: 30 None <p>The table below shows the quotas usage of the cluster at two different times:</p> Time Elastic Quota A Elastic Quota B Elastic Quota C t1 Used: 40/40 GB Used: 40/10 GB Over-quota: 30 GB Used: 0 GB t2 Used: 50/40 GB Used 30/10 GB Over-quota: 20 GB Used: 0 GB <p>The cluster has a total of 30 GB of memory of available over-quotas, which at time t1 are all being consumed by the pods in the namespace subject to Elastic Quota B.</p> <p>At time t2, a new Pod is created in the namespace subject to Elastic Quota A. Even though all the quotas of the cluster are currently being used, the fair sharing mechanism grants to Elastic Quota A a certain amount of over-quotas that it can use, and in order to grant these quotas nos can preempt one or more over-quota pods from the namespace subject to Elastic Quota B.</p> <p>Specifically, the following are the amounts of over-quotas guaranteed to each of the namespaces subject to the Elastic Quotas defined in the table above:</p> <ul> <li>guaranteed over-quota A = 40 / (40 + 10 + 30) * (0 + 0 + (30 - 0)) = 15</li> <li>guaranteed over-quota B = 10 / (40 + 10 + 30) * (0 + 0 + (30 - 0)) = 3</li> </ul> <p>Assuming that all the pods in the cluster are requesting only 10 GB of GPU memory, an over-quota Pod from Elastic Quota B is preempted because the following conditions are true:</p> <ul> <li>\u2705 used quotas A + new Pod A &lt;= min quota A + guaranteed over-quota A</li> <li>40 + 10 &lt;= 40 + 15</li> <li>\u2705 used over-quotas B &gt; guaranteed over-quotas</li> <li>30 &gt; 3</li> </ul>"},{"location":"elastic-resource-quota/key-concepts/#gpu-memory-limits","title":"GPU memory limits","text":"<p>Both <code>ElasticQuota</code> and <code>CompositeElasticQuota</code> resources support the custom resource <code>nos.nebuly.com/gpu-memory</code>. You can use this resource in the <code>min</code> and <code>max</code> fields of the elastic quotas specification to define the minimum amount of GPU memory (expressed in GB) guaranteed to a certain namespace and its maximum limit, respectively.</p> <p>This resource is particularly useful if you use Elastic Quotas together with automatic GPU partitioning, since it allows you to assign resources to different teams (e.g. namespaces) in terms of GPU memory instead of in number of GPUs, and the users can than consume request in the same terms by claiming GPU slices with a specific amount of memory, enabling an overall fine-grained control over the GPUs of the cluster.</p> <p><code>nos</code> automatically computes the GPU memory requested by each Pod from the GPU resources requested by its containers and enforces the limits accordingly. The amount of memory GB corresponding to the generic resource <code>nvidia.com/gpu</code> is defined by the field <code>global.nvidiaGpuResourceMemoryGB</code> of the installation chart, which is <code>32</code> by default.</p> <p>For instance, using the default configuration, the value of the resource <code>nos.nebuly.com/gpu-memory</code> computed from the Pod specification below is <code>10+32=42</code>.</p> <pre><code>apiVersion: apps/v1\nkind: Pod\nmetadata:\n  name: nginx-deployment\nspec:\n  schedulerName: nos-scheduler\n  containers:\n    - name: my-container\n      image: my-image:0.0.1\n      resources:\n        limits:\n          nvidia.com/mig-1g.10gb: 1\n          nvidia.com/gpu: 1\n</code></pre>"},{"location":"elastic-resource-quota/overview/","title":"Overview","text":"<p><code>nos</code> extends the Kubernetes Resource Quotas by implementing the Capacity Scheduling KEP and adding more flexibility through two custom resources: <code>ElasticQuotas</code> and <code>CompositeElasticQuotas</code>.</p> <p>While standard Kubernetes resource quotas allow you only to define limits on the maximum overall resource allocation of each namespace, <code>nos</code> elastic quotas let you define two different limits:</p> <ol> <li><code>min</code>: the minimum resources that are guaranteed to the namespace</li> <li><code>max</code>: the upper bound of the resources that the namespace can consume</li> </ol> <p>In this way namespaces can borrow reserved resource quotas from other namespaces that are not using them, as long as they do not exceed their max limit (if any) and the namespaces lending the quotas do not need them. When a namespace claims back its reserved <code>min</code> resources, pods borrowing resources from other namespaces (e.g. over-quota pods) are preempted to make up space.</p> <p>Moreover, while the standard Kubernetes quota management computes the used quotas as the aggregation of the resources of the resource requests specified in the Pods spec, <code>nos</code> computes the used quotas by taking into account only running Pods in order to avoid lower resource utilization due to scheduled Pods that failed to start.</p> <p>Elastic Resource Quota management is based on the Capacity Scheduling scheduler plugin, which also implements the Capacity Scheduling KEP. <code>nos</code> extends the former implementation by adding the following features:</p> <ul> <li>over-quota pods preemption</li> <li><code>CompositeElasticQuota</code> resources for defining limits on multiple namespaces</li> <li>custom resource <code>nos.nebuly.com/gpu-memory</code></li> <li>fair sharing of over-quota resources</li> <li>optional <code>max</code> limits</li> </ul>"},{"location":"elastic-resource-quota/troubleshooting/","title":"Troubleshooting","text":"<p>You can check the logs of the scheduler by running the following command:</p> <pre><code> kubectl logs -n nebuly-nos -l app.kubernetes.io/component=nos-scheduler -f\n</code></pre> <p>You can check the logs of the operator by running the following command:</p> <pre><code> kubectl logs -n nebuly-nos -l app.kubernetes.io/component=nos-operator -f\n</code></pre>"},{"location":"helm-charts/nos/","title":"nos","text":"<p>The open-source platform for running AI workloads on k8s in an optimized way, both in terms of hardware utilization and workload performance.</p>"},{"location":"helm-charts/nos/#maintainers","title":"Maintainers","text":"Name Email Url Michele Zanotti m.zanotti@nebuly.com Diego Fiori d.fiori@nebuly.com"},{"location":"helm-charts/nos/#source-code","title":"Source Code","text":"<ul> <li>https://github.com/nebuly-ai/nos</li> </ul>"},{"location":"helm-charts/nos/#values","title":"Values","text":"Key Type Default Description allowDefaultNamespace bool <code>false</code> If true allows to deploy <code>nos</code> chart in the <code>default</code> namespace gpuPartitioner.affinity object <code>{}</code> Sets the affinity config of the GPU Partitioner Pod. gpuPartitioner.batchWindowIdleSeconds int <code>10</code> Idle seconds before the GPU partitioner processes the current batch if no new pending Pods are created, and the timeout has not been reached.  Higher values make the GPU partitioner will potentially take into account more pending Pods when deciding the GPU partitioning plan, but the partitioning will be performed less frequently gpuPartitioner.batchWindowTimeoutSeconds int <code>60</code> Timeout of the window used by the GPU partitioner for batching pending Pods.  Higher values make the GPU partitioner will potentially take into account more pending Pods when deciding the GPU partitioning plan, but the partitioning will be performed less frequently gpuPartitioner.devicePlugin.config.name string <code>\"nos-device-plugin-configs\"</code> Name of the ConfigMap containing the NVIDIA Device Plugin configuration files. It must be equal to the value \"devicePlugin.config.name\" of the Helm chart used for deploying the NVIDIA GPU Operator. gpuPartitioner.devicePlugin.config.namespace string <code>\"nebuly-nvidia\"</code> Namespace of the ConfigMap containing the NVIDIA Device Plugin configuration files. It must be equal to the namespace where the Nebuly NVIDIA Device Plugin has been deployed to. gpuPartitioner.devicePlugin.configUpdateDelaySeconds int <code>5</code> Duration of the delay between when the new partitioning config is computed and when it is sent to the NVIDIA device plugin. Since the config is provided to the plugin as a mounted ConfigMap, this delay is required to ensure that the updated ConfigMap is propagated to the mounted volume. gpuPartitioner.enabled bool <code>true</code> Enable or disable the <code>nos gpu partitioner</code> gpuPartitioner.fullnameOverride string <code>\"\"</code> gpuPartitioner.gpuAgent object - Configuration of the GPU Agent component of the GPU Partitioner. gpuPartitioner.gpuAgent.image.pullPolicy string <code>\"IfNotPresent\"</code> Sets the GPU Agent Docker image pull policy. gpuPartitioner.gpuAgent.image.repository string <code>\"ghcr.io/nebuly-ai/nos-gpu-agent\"</code> Sets the GPU Agent Docker image. gpuPartitioner.gpuAgent.image.tag string <code>\"\"</code> Overrides the GPU Agent image tag whose default is the chart appVersion. gpuPartitioner.gpuAgent.logLevel int <code>0</code> The level of log of the GPU Agent. Zero corresponds to <code>info</code>, while values greater or equal than 1 corresponds to higher debug levels. Must be &gt;= 0. gpuPartitioner.gpuAgent.reportConfigIntervalSeconds int <code>10</code> Interval at which the mig-agent will report to k8s status of the GPUs of the Node gpuPartitioner.gpuAgent.resources object <code>{\"limits\":{\"cpu\":\"100m\",\"memory\":\"128Mi\"}}</code> Sets the resource requests and limits of the GPU Agent container. gpuPartitioner.gpuAgent.runtimeClassName string <code>nil</code> The container runtime class name to use for the GPU Agent container. gpuPartitioner.gpuAgent.tolerations list <code>[{\"effect\":\"NoSchedule\",\"key\":\"kubernetes.azure.com/scalesetpriority\",\"operator\":\"Equal\",\"value\":\"spot\"}]</code> Sets the tolerations of the GPU Agent Pod. gpuPartitioner.image.pullPolicy string <code>\"IfNotPresent\"</code> Sets the GPU Partitioner Docker image pull policy. gpuPartitioner.image.repository string <code>\"ghcr.io/nebuly-ai/nos-gpu-partitioner\"</code> Sets the GPU Partitioner Docker image. gpuPartitioner.image.tag string <code>\"\"</code> Overrides the GPU Partitioner image tag whose default is the chart appVersion. gpuPartitioner.knownMigGeometries list - List that associates GPU models to the respective allowed MIG configurations gpuPartitioner.kubeRbacProxy object - Configuration of the Kube RBAC Proxy, which runs as sidecar of all the GPU Partitioner components Pods. gpuPartitioner.leaderElection.enabled bool <code>true</code> Enables/Disables the leader election of the GPU Partitioner controller manager. gpuPartitioner.logLevel int <code>0</code> The level of log of the GPU Partitioner. Zero corresponds to <code>info</code>, while values greater or equal than 1 corresponds to higher debug levels. Must be &gt;= 0. gpuPartitioner.migAgent object - Configuration of the MIG Agent component of the GPU Partitioner. gpuPartitioner.migAgent.image.pullPolicy string <code>\"IfNotPresent\"</code> Sets the MIG Agent Docker image pull policy. gpuPartitioner.migAgent.image.repository string <code>\"ghcr.io/nebuly-ai/nos-mig-agent\"</code> Sets the MIG Agent Docker image. gpuPartitioner.migAgent.image.tag string <code>\"\"</code> Overrides the MIG Agent image tag whose default is the chart appVersion. gpuPartitioner.migAgent.logLevel int <code>0</code> The level of log of the MIG Agent. Zero corresponds to <code>info</code>, while values greater or equal than 1 corresponds to higher debug levels. Must be &gt;= 0. gpuPartitioner.migAgent.reportConfigIntervalSeconds int <code>10</code> Interval at which the mig-agent will report to k8s the MIG partitioning status of the GPUs of the Node gpuPartitioner.migAgent.resources object <code>{\"limits\":{\"cpu\":\"100m\",\"memory\":\"128Mi\"}}</code> Sets the resource requests and limits of the MIG Agent container. gpuPartitioner.migAgent.tolerations list <code>[{\"effect\":\"NoSchedule\",\"key\":\"kubernetes.azure.com/scalesetpriority\",\"operator\":\"Equal\",\"value\":\"spot\"}]</code> Sets the tolerations of the MIG Agent Pod. gpuPartitioner.nameOverride string <code>\"\"</code> gpuPartitioner.nodeSelector object <code>{}</code> Sets the nodeSelector config of the GPU Partitioner Pod. gpuPartitioner.podAnnotations object <code>{}</code> Sets the annotations of the GPU Partitioner Pod. gpuPartitioner.podSecurityContext object <code>{\"runAsNonRoot\":true,\"runAsUser\":1000}</code> Sets the security context of the GPU partitioner Pod. gpuPartitioner.replicaCount int <code>1</code> Number of replicas of the gpu-manager Pod. gpuPartitioner.resources object <code>{\"limits\":{\"cpu\":\"500m\",\"memory\":\"128Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"64Mi\"}}</code> Sets the resource limits and requests of the GPU partitioner container. gpuPartitioner.scheduler.config.name string <code>\"nos-scheduler-config\"</code> Name of the ConfigMap containing the k8s scheduler configuration file. If not specified or the ConfigMap does not exist, the GPU partitioner will use the default k8s scheduler profile. gpuPartitioner.tolerations list <code>[]</code> Sets the tolerations of the GPU Partitioner Pod. nvidiaGpuResourceMemoryGB int <code>32</code> Defines how many GB of memory each nvidia.com/gpu resource has. operator.affinity object <code>{}</code> Sets the affinity config of the operator Pod. operator.enabled bool <code>true</code> Enable or disable the <code>nos operator</code> operator.fullnameOverride string <code>\"\"</code> operator.image.pullPolicy string <code>\"IfNotPresent\"</code> Sets the operator Docker image pull policy. operator.image.repository string <code>\"ghcr.io/nebuly-ai/nos-operator\"</code> Sets the operator Docker repository operator.image.tag string <code>\"\"</code> Overrides the operator Docker image tag whose default is the chart appVersion. operator.kubeRbacProxy object - Configuration of the Kube RBAC Proxy, which runs as sidecar of the operator Pods. operator.leaderElection.enabled bool <code>true</code> Enables/Disables the leader election of the operator controller manager. operator.logLevel int <code>0</code> The level of log of the controller manager. Zero corresponds to <code>info</code>, while values greater or equal than 1 corresponds to higher debug levels. Must be &gt;= 0. operator.nameOverride string <code>\"\"</code> operator.nodeSelector object <code>{}</code> Sets the nodeSelector config of the operator Pod. operator.podAnnotations object <code>{}</code> Sets the annotations of the operator Pod. operator.podSecurityContext object <code>{\"runAsNonRoot\":true}</code> Sets the security context of the operator Pod. operator.replicaCount int <code>1</code> Number of replicas of the controller manager Pod. operator.resources object <code>{\"limits\":{\"cpu\":\"500m\",\"memory\":\"128Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"64Mi\"}}</code> Sets the resource limits and requests of the operator controller manager container. operator.securityContext object <code>{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]}}</code> Sets the security context of the operator container. operator.tolerations list <code>[]</code> Sets the tolerations of the operator Pod. scheduler.affinity object <code>{}</code> Sets the affinity config of the scheduler deployment. scheduler.config object <code>{}</code> Overrides the Kube Scheduler configuration scheduler.enabled bool <code>true</code> Enable or disable the <code>nos scheduler</code> scheduler.fullnameOverride string <code>\"\"</code> scheduler.image.pullPolicy string <code>\"IfNotPresent\"</code> Sets Docker image pull policy. scheduler.image.repository string <code>\"ghcr.io/nebuly-ai/nos-scheduler\"</code> Sets Docker image. scheduler.image.tag string <code>\"\"</code> Overrides the image tag whose default is the chart appVersion. scheduler.leaderElection.enabled bool <code>true</code> Enables/Disables the leader election when deployed with multiple replicas. scheduler.logLevel int <code>0</code> The level of log of the scheduler. Zero corresponds to <code>info</code>, while values greater or equal than 1 corresponds to higher debug levels. Must be &gt;= 0. scheduler.nameOverride string <code>\"\"</code> scheduler.nodeSelector object <code>{}</code> Sets the nodeSelector config of the scheduler deployment. scheduler.podAnnotations object <code>{}</code> Sets the annotations of the scheduler Pod. scheduler.podSecurityContext object <code>{}</code> Sets the security context of the scheduler Pod scheduler.replicaCount int <code>1</code> Number of replicas of the scheduler. scheduler.resources object <code>{\"limits\":{\"cpu\":\"500m\",\"memory\":\"128Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"64Mi\"}}</code> Sets the resource limits and requests of the scheduler container. scheduler.securityContext object <code>{\"privileged\":false}</code> Sets the security context of the scheduler container scheduler.tolerations list <code>[]</code> Sets the tolerations of the scheduler deployment. shareTelemetry bool <code>true</code> If true, shares with Nebuly telemetry data collected only during the Chart installation"}]}